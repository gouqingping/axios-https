{"code":"import request from \"./request\";\r\nexport { cancelRequest, cancelAllRequest } from \"./request\";\r\nimport { DEFAULT_MULTIPART, DEFAULT_JSON, isObject, isString } from \"./request/utils\";\r\n;\r\n;\r\nexport function useBase(config) {\r\n    const { method = 'GET' } = config;\r\n    if (['get', 'GET', 'Get'].includes(method)) {\r\n        config.params = config.data;\r\n    }\r\n    return request.request(config);\r\n}\r\nexport function generatePathQuery(path, obj) {\r\n    if (!path)\r\n        return path;\r\n    return path + Object.entries(obj || {}).reduce((total, [k, v]) => (total += `${k}=${encodeURIComponent(v)}&`), \"?\").slice(0, -1);\r\n}\r\n;\r\nexport function post(url, data, o) {\r\n    const params = { headers: DEFAULT_MULTIPART, data, ...(o || {}) };\r\n    return new Promise((resolve, reject) => useBase({\r\n        method: 'post',\r\n        url,\r\n        data,\r\n        ...params,\r\n    }).then((res) => resolve(res), (err) => reject(err)).catch((error) => reject(error)));\r\n}\r\n;\r\nexport function get(url, data, o) {\r\n    const params = { data, ...(o || {}) };\r\n    return new Promise((resolve, reject) => useBase({\r\n        method: 'get',\r\n        url,\r\n        data,\r\n        ...params,\r\n    }).then((res) => resolve(res), (err) => reject(err)).catch((error) => reject(error)));\r\n}\r\n;\r\nexport function put(url, data, o) {\r\n    const params = { data, ...(o || {}) };\r\n    return new Promise((resolve, reject) => useBase({\r\n        method: 'put',\r\n        url,\r\n        data,\r\n        ...params,\r\n    }).then((res) => resolve(res), (err) => reject(err)).catch((error) => reject(error)));\r\n}\r\n;\r\nexport function patch(url, data, o) {\r\n    const params = { data, ...(o || {}) };\r\n    return new Promise((resolve, reject) => useBase({\r\n        method: 'patch',\r\n        url,\r\n        data,\r\n        ...params,\r\n    }).then((res) => resolve(res), (err) => reject(err)).catch((error) => reject(error)));\r\n}\r\n;\r\nexport function head(url, data, o) {\r\n    const params = { data, ...(o || {}) };\r\n    return new Promise((resolve, reject) => useBase({\r\n        method: 'head',\r\n        url,\r\n        data,\r\n        ...params,\r\n    }).then((res) => resolve(res), (err) => reject(err)).catch((error) => reject(error)));\r\n}\r\n;\r\nexport function dlt(url, data, o) {\r\n    const params = { data, ...(o || {}) };\r\n    return new Promise((resolve, reject) => useBase({\r\n        method: 'delete',\r\n        url,\r\n        data,\r\n        ...params,\r\n    }).then((res) => resolve(res), (err) => reject(err)).catch((error) => reject(error)));\r\n}\r\n;\r\nexport function upload(url, data, o) {\r\n    return post(url, data, { withCredentials: true, ...o });\r\n}\r\n;\r\nexport function json(url, data, o) {\r\n    return post(url, JSON.stringify(data), { headers: DEFAULT_JSON, ...o });\r\n}\r\n;\r\nexport function formData(url, data, o) {\r\n    const FORM_DATA = new FormData();\r\n    if (typeof data === \"object\") {\r\n        Object.keys(data).forEach((item) => FORM_DATA.append(item, data[item]));\r\n    }\r\n    return new Promise((resolve, reject) => useBase({\r\n        method: 'post',\r\n        url,\r\n        headers: DEFAULT_MULTIPART,\r\n        data: FORM_DATA, ...(o || {})\r\n    }).then((res) => resolve(res), (err) => reject(err)).catch((error) => reject(error)));\r\n}\r\n;\r\nexport function getBlob(url, data, o) {\r\n    return get(url, data, { headers: DEFAULT_JSON, responseType: 'blob', ...o });\r\n}\r\n;\r\nexport const useRequest = (reslove, reject) => request.instance.interceptors.request.use(reslove, reject);\r\nexport const useResponse = (reslove, reject) => request.instance.interceptors.response.use(reslove, reject);\r\nexport const useConfig = (key, value) => {\r\n    if (isString(key)) {\r\n        request.instance.defaults[key] = value;\r\n    }\r\n    ;\r\n    if (isObject(key)) {\r\n        const currentConfig = key;\r\n        Object.keys(currentConfig).forEach((name) => {\r\n            request.instance.defaults[name] = currentConfig[name];\r\n        });\r\n    }\r\n    ;\r\n};\r\nconst requests = { useBase, get, post, put, patch, head, dlt, formData, json, upload, useRequest, useResponse };\r\nObject.keys(requests).forEach((name) => (request[name] = requests[name]));\r\nexport default request;\r\n","references":["/Users/gos/Documents/Jobs/ELI/NPM包/request/packages/request/index.ts","/Users/gos/Documents/Jobs/ELI/NPM包/request/node_modules/axios/index.d.ts","/Users/gos/Documents/Jobs/ELI/NPM包/request/packages/request/index.ts","/Users/gos/Documents/Jobs/ELI/NPM包/request/packages/request/utils.ts","/Users/gos/Documents/Jobs/ELI/NPM包/request/packages/request/types.ts"],"dts":{"name":"/Users/gos/Documents/Jobs/ELI/NPM包/request/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nexport { cancelRequest, cancelAllRequest } from \"./request\";\r\nimport type { AnyObject, IRequestConfig, IRequest } from \"./request/types\";\r\nexport interface RequestConfig extends AxiosRequestConfig {\r\n}\r\nexport interface Response extends AxiosResponse {\r\n}\r\nexport declare function useBase<D = any, T = any>(config: IRequestConfig<D, T>): Promise<any>;\r\nexport declare function generatePathQuery(path: string, obj?: AnyObject): string;\r\nexport declare function post<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function get<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function put<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function patch<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function head<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function dlt<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function upload<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function json<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function formData<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare function getBlob<D = any, T = any>(url: string, data?: D, o?: RequestConfig): Promise<T>;\r\nexport declare const useRequest: (reslove: (config: RequestConfig) => RequestConfig, reject?: ((error: any) => any) | undefined) => number;\r\nexport declare const useResponse: (reslove: (config: Response) => Response, reject?: ((error: any) => any) | undefined) => number;\r\nexport declare const useConfig: (key: string | AnyObject, value?: any) => void;\r\ndeclare const _default: IRequest;\r\nexport default _default;\r\n"}}
